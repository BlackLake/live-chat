{"version":3,"sources":["components/Message/index.js","containers/MessageListArea/index.js","services/websocket-service.js","components/InputArea/index.js","config/config.js","containers/LiveChat/index.js","App.js","serviceWorker.js","index.js"],"names":["Message","message","this","props","Item","key","id","Meta","title","sender","description","Component","MessageListArea","renderMessage","className","size","dataSource","messages","renderItem","socket","webSocket","isSocketInitialized","open","url","onOpen","onMessage","onClose","onError","WebSocket","onopen","console","log","onmessage","JSON","parse","data","onclose","closeEvent","reason","error","close","sendMessage","massage","send","stringify","InputArea","state","input","onInputChanged","setState","clearInput","userName","messageInput","focus","align","span","justify","onChange","e","target","value","onPressEnter","ref","autoFocus","type","onClick","LiveChat","isModalVisible","connectionCloseReason","onConnectionOpened","onMessageReceived","onConnectionClosed","onConnectionError","errorMessage","onUserNameInputChange","userNameInput","onModalConfirm","config","visible","closable","footer","disabled","App","locale","enUS","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.86356bc3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { List } from 'antd';\n\nclass Message extends Component {\n  render() {\n    const { message } = this.props;\n    return (\n      <List.Item key={message.id}>\n        <List.Item.Meta title={message.sender} description={message.message} />\n      </List.Item>\n    );\n  }\n}\n\nexport default Message;\n","import React, {Component} from 'react';\nimport {List} from 'antd';\nimport Message from '../../components/Message';\nimport './style.css';\n\nclass MessageListArea extends Component {\n  renderMessage = (message) => {\n    return <Message message={message} />;\n  };\n\n  render() {\n    return (\n      <div className={'message-list-container'}>\n        <List\n          size=\"small\"\n          dataSource={this.props.messages}\n          renderItem={this.renderMessage}\n          className={this.props.className}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MessageListArea;\n","let socket = null;\n\nconst NORMAL_CLOSURE = 1000;\n\nconst webSocket = {\n  isSocketInitialized: () => {\n    return !!socket;\n  },\n  open: (url, onOpen, onMessage, onClose, onError) => {\n    socket = new WebSocket(url);\n\n    socket.onopen = () => {\n      onOpen();\n      console.log('WebSocket connection established');\n    };\n    socket.onmessage = (message) => {\n      onMessage(JSON.parse(message.data));\n    };\n    socket.onclose = (closeEvent) => {\n      onClose(closeEvent.reason);\n    };\n    socket.onError = (error) => {\n      onError(error);\n      console.log(`Socket encountered error: ${error.message} Closing socket`);\n      socket.close();\n    };\n  },\n\n  sendMessage: (massage) => {\n    socket.send(JSON.stringify(massage));\n  },\n\n  close: () => {\n    socket && socket.close(NORMAL_CLOSURE);\n  }\n};\n\nexport default webSocket;\n","import React, { Component } from 'react';\nimport { Button, Col, Input, Row } from 'antd';\nimport './style.css';\nimport webSocket from '../../services/websocket-service';\n\nclass InputArea extends Component {\n  state = {\n    input: ''\n  };\n\n  onInputChanged = (input) => {\n    this.setState({ input });\n  };\n\n  clearInput = () => {\n    this.setState({ input: '' });\n  };\n\n  sendMessage = () => {\n    if (webSocket.isSocketInitialized() && this.state.input !== '') {\n      const message = {\n        sender: this.props.userName,\n        message: this.state.input\n      };\n      webSocket.sendMessage(message);\n      this.clearInput();\n      this.messageInput.focus();\n    }\n  };\n\n  render() {\n    return (\n      <Row align={'middle'}>\n        <Col span={22}>\n          <Row justify={'end'}>\n            <Input\n              className={'message-input'}\n              onChange={(e) => this.onInputChanged(e.target.value)}\n              onPressEnter={this.sendMessage}\n              value={this.state.input}\n              ref={(input) => {\n                this.messageInput = input;\n              }}\n              autoFocus\n            />\n          </Row>\n        </Col>\n        <Col span={2}>\n          <Row justify={'center'}>\n            <Button type={'primary'} size={'medium'} onClick={this.sendMessage}>\n              Send\n            </Button>\n          </Row>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default InputArea;\n","export default {\n  WEBSOCKET_API_URL:  'ws://104.248.253.86:8080/ws',\n}","import React, { Component, Fragment } from 'react';\nimport MessageListArea from '../MessageListArea';\nimport InputArea from '../../components/InputArea';\nimport webSocket from '../../services/websocket-service';\nimport { Button, Input, Modal, Row, Space } from 'antd';\nimport './style.css';\nimport config from '../../config/config';\n\nclass LiveChat extends Component {\n  state = {\n    messages: [],\n    userName: '',\n    isModalVisible: true,\n    connectionCloseReason: ''\n  };\n\n  onConnectionOpened = () => {\n    this.setState({\n      isModalVisible: false\n    });\n  };\n\n  onMessageReceived = (message) => {\n    this.setState({ messages: [...this.state.messages, message] });\n  };\n\n  onConnectionClosed = (reason) => {\n    const connectionClosedMessage = {\n      sender: 'System',\n      message: `Connection Closed`\n    };\n\n    this.setState({\n      messages: [...this.state.messages, connectionClosedMessage],\n      isModalVisible: true,\n      connectionCloseReason: reason\n    });\n  };\n\n  onConnectionError = (error) => {\n    const errorMessage = {\n      sender: 'System',\n      message: error\n    };\n    this.setState({ messages: [...this.state.messages, errorMessage] });\n  };\n\n  onUserNameInputChange = (userNameInput) => {\n    this.setState({ userName: userNameInput });\n  };\n\n  onModalConfirm = () => {\n    webSocket.open(\n      `${config.WEBSOCKET_API_URL}?userName=${this.state.userName}`,\n      this.onConnectionOpened,\n      this.onMessageReceived,\n      this.onConnectionClosed,\n      this.onConnectionError\n    );\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <Modal\n          title={'Enter username'}\n          visible={this.state.isModalVisible}\n          closable={false}\n          footer={null}\n        >\n          <Row justify={'center'} className={'modal-row'}>\n            <Space>\n              <span>Username :</span>\n              <Input\n                value={this.state.userName}\n                onChange={(e) => this.onUserNameInputChange(e.target.value)}\n                onPressEnter={this.onModalConfirm}\n                autoFocus\n              />\n              <span>{this.state.connectionCloseReason}</span>\n            </Space>\n          </Row>\n          <Row justify={'center'} className={'modal-row'}>\n            <Button\n              type={'primary'}\n              onClick={this.onModalConfirm}\n              disabled={!this.state.userName}\n            >\n              Connect\n            </Button>\n          </Row>\n        </Modal>\n        <MessageListArea messages={this.state.messages} />\n        <InputArea userName={this.state.userName} />\n      </Fragment>\n    );\n  }\n}\n\nexport default LiveChat;\n","import React, { Component } from 'react';\nimport { ConfigProvider } from 'antd';\nimport enUS from 'antd/es/locale/en_US';\nimport 'antd/dist/antd.css';\nimport LiveChat from './containers/LiveChat';\n\nclass App extends Component {\n  render() {\n    return (\n      <ConfigProvider locale={enUS}>\n        <LiveChat />\n      </ConfigProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}